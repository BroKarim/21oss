generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_URL_UNPOOLED")
  extensions = [citext]
}

enum ReportType {
  BrokenLink
  WrongCategory
  WrongAlternative
  Outdated
  Other
}

enum AdType {
  Banner
  AlternativePage
  ToolPage
  SelfHosted
  BlogPost
  All
}

enum ToolStatus {
  Draft
  Published
}


enum StackType {
  Tool
  SaaS
  Cloud
  ETL
  Analytics
  Language
  DB
  CI
  Framework
  Hosting
  API
  Storage
  Monitoring
  Messaging
  App
  Network
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  likes    Like[]
  reports  Report[]

  // Indexes
  @@index([id])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Ad {
  id             String   @id @default(cuid())
  email          String?
  name           String
  description    String?
  websiteUrl     String
  affiliateUrl   String?
  imageUrl       String?
  buttonLabel    String?
  faviconUrl     String?
  type           AdType   @default(All)
  startsAt       DateTime
  endsAt         DateTime
  subscriptionId String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model Tool {
    id              String    @id @default(cuid())
    name            String    @db.Citext
    slug            String    @unique
    websiteUrl      String?   @unique 
    repositoryUrl   String   @unique
    demoUrl         String?
    affiliateUrl    String?
    tagline         String?
    description     String?
    content         String?
    stars           Int       @default(0)
    forks           Int       @default(0)
    faviconUrl      String?
    screenshotUrl   String?
    screenshots     ToolScreenshot[]
    discountCode    String?
    discountAmount  String?
    firstCommitDate DateTime?
    lastCommitDate  DateTime?
    pageviews       Int?       @default(0)
    status          ToolStatus @default(Draft)
    publishedAt     DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    // Foreign Keys
    licenseId    String?
    inspiredById String?

    // Relations

    license    License?    @relation(fields: [licenseId], references: [id], onDelete: SetNull)
    inspiredBy InspiredBy? @relation(fields: [inspiredById], references: [id], onDelete: SetNull)
    categories Category[]  @relation("ToolCategories")
    platforms  Platform[]  @relation("ToolPlatforms")
    stacks     Stack[]     @relation("ToolStacks")
    likes      Like[]
    reports    Report[]

  // Indexes
  @@index([slug])
  @@index([licenseId])
  @@index([inspiredById])
}



model ToolScreenshot {
  id         String   @id @default(cuid())
  tool       Tool     @relation(fields: [toolId], references: [id])
  toolId     String

  imageUrl   String
  caption    String?   

  order      Int
}


model Category {
  id          String   @id @default(cuid())
  name        String   @db.Citext
  slug        String   @unique
  fullPath    String   @unique @default("")
  label       String?
  description String?  @db.Text
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tools         Tool[]     @relation("ToolCategories")
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("CategoryHierarchy")

  // Indexes
  @@index([slug])
  @@index([parentId])
}

model Platform {
  id        String   @id @default(cuid())
  name      String   @db.Citext
  slug      String   @unique
  iconUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tools Tool[] @relation("ToolPlatforms")

  // Indexes
  @@index([slug])
}

model InspiredBy {
  id        String   @id @default(cuid())
  name      String   @db.Citext
  slug      String   @unique
  iconUrl   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tools Tool[]

  // Indexes
  @@index([slug])
}

model Stack {
  id          String    @id @default(cuid())
  name        String    @db.Citext
  slug        String    @unique
  type        StackType @default(Language)
  description String?
  website     String?
  faviconUrl  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations  
  tools Tool[] @relation("ToolStacks")

  // Indexes
  @@index([slug])
}

model License {
  id        String   @id @default(cuid())
  name      String   @unique @db.Citext
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tools Tool[]

  // Indexes
  @@index([slug])
}

model Session {
  id             String   @id @default(cuid())
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Indexes
  @@index([userId])
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Indexes
  @@index([userId])
}

model Report {
  id        String     @id @default(cuid())
  type      ReportType
  message   String?
  userId    String?
  toolId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  tool    Tool?    @relation(fields: [toolId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([toolId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  toolId    String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool    Tool    @relation(fields: [toolId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([userId, toolId])
  @@index([userId])
  @@index([toolId])
}