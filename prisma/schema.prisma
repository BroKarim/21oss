// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_URL_UNPOOLED")
  extensions = [citext]
}

enum ReportType {
  BrokenLink
  WrongCategory
  WrongAlternative
  Outdated
  Other
}

enum AdType {
  Banner
  Alternatives
  AlternativePage
  Tools
  ToolPage
  SelfHosted
  BlogPost
  All
}

enum StackType {
  Tool
  SaaS
  Cloud
  ETL
  Analytics
  Language
  DB
  CI
  Framework
  Hosting
  API
  Storage
  Monitoring
  Messaging
  App
  Network
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          String    @default("user")
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  likes    Like[]
  reports  Report[]

  // Indexes
  @@index([id])
}

model Content {
  id              String    @id @default(cuid())
  name            String    @db.Citext
  slug            String    @unique
  websiteUrl      String?   @unique 
  repositoryUrl   String?   @unique
  demoUrl         String?
  affiliateUrl    String?
  tagline         String?
  description     String?
  stars           Int       @default(0)
  forks           Int       @default(0)
  faviconUrl      String?
  screenshotUrl   String?
  discountCode    String?
  discountAmount  String?
  firstCommitDate DateTime?
  lastCommitDate  DateTime?
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Foreign Keys
  licenseId    String?
  inspiredById String?

  // Relations
  license    License?    @relation(fields: [licenseId], references: [id], onDelete: SetNull)
  inspiredBy InspiredBy? @relation(fields: [inspiredById], references: [id], onDelete: SetNull)
  categories Category[]  @relation("ContentCategories")
  platforms  Platform[]  @relation("ContentPlatforms")
  stacks     Stack[]     @relation("ContentStacks")
  likes      Like[]
  reports    Report[]

  // Indexes
  @@index([slug])
  @@index([licenseId])
  @@index([inspiredById])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @db.Citext
  slug        String   @unique
  fullPath    String   @unique @default("")
  label       String?
  description String?  @db.Text
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contents      Content[]  @relation("ContentCategories")
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("CategoryHierarchy")

  // Indexes
  @@index([slug])
  @@index([parentId])
}

model Platform {
  id        String   @id @default(cuid())
  name      String   @db.Citext
  slug      String   @unique
  iconUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contents Content[] @relation("ContentPlatforms")

  // Indexes
  @@index([slug])
}

model InspiredBy {
  id        String   @id @default(cuid())
  name      String   @db.Citext
  slug      String   @unique
  iconUrl   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contents Content[]

  // Indexes
  @@index([slug])
}

model Stack {
  id          String    @id @default(cuid())
  name        String    @db.Citext
  slug        String    @unique
  type        StackType @default(Language)
  description String?
  website     String?
  faviconUrl  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations  
  contents Content[] @relation("ContentStacks")

  // Indexes
  @@index([slug])
}

model License {
  id        String   @id @default(cuid())
  name      String   @unique @db.Citext
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contents Content[]

  // Indexes
  @@index([slug])
}

model Session {
  id             String   @id @default(cuid())
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Indexes
  @@index([userId])
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Indexes
  @@index([userId])
}

model Report {
  id        String     @id @default(cuid())
  type      ReportType
  message   String?
  userId    String?
  contentId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  content Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([contentId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}
